IoC Container :-
__________________________________

It contains all the classes which are going to be used, and its object are injected when required.



Spring Annotations :-
__________________________________

@Configuration

- It is used with that java class which contains configuration.
- Class contains @Configuration means, it will contain either of Bean, or any package which should be known by the IoC.
- This annotiaton helps to identify that this class is configuration class.
- This class contains the details or beans that are created in Spring Application.





@ComponentScan	OR @ComponentScan(basePackages = "package-1 package-2")

- It is used to scan all those components which can have beans.
- Generally, it is used with @Configration annotation.
- If we want the ComponentScan to scan different packages, we use basePackages attribute of ComponentScan.
- It is necessary to define all the packages in the ConponentScan, otherwise, it will not scan anything.





@Bean		OR	@Bean(name = "className")

- A method of configuration class, which create an instance of desired class and return it.
- The value returned by this method is called Bean.
- In short, Bean is nothing but an instance of a class.
- By default, the Bean name is same as that of class name but with lowercase initial character.





@Component 	OR	 @Component (value="nameOfClass")
@Service
@Repository
@Controller
@Entity

- @Component is a general annotation to mark a class as Bean.
- But, to make it easy for Developers to identify which layer of project they are dealing,
	other annotaions like @Service, @Repository, @Controller etc were made.
- They perform the same work as that of @Component.


The below methods are predefined and is used to inject the object of bean.

ApplicationContext ctx = new AnnotationConfigApplicationContext(UserInterface.class);		//	pass the className.class
		
Service1 userService = ctx.getBean(Service1.class);							//	pass the class of bean





@PropertySource("classpath:File_Name.properties")
_________________________________________________________

- When, we want to read the properties file, we have to provide the path first, so, we use the above Annotation.
- We then follow the below way to read the application.properties file.


Environment environment = ApplicationContext.getEnvironment();
		
System.out.println(environment.getProperty("SUCCESS"));