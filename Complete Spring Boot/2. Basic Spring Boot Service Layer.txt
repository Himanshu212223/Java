For Proper use of Spring Boot, it is generally recommend that you locate your main application class in a root package above other classes. 
For Example :-


com
 +- example	( com.example )
 |	|
 |   	+- MyApplication.java 
 |
 +- customer ( com.exaple.customer )
 |	|   
 |	+- Customer.java
 |	+- CustomerController.java
 |   	+- CustomerService.java
 |   	+- CustomerRepository.java
 |
 +- order ( com.example.order )
	|
	+- Order.java
 	+- OrderController.java
	+- OrderService.java
	+- OrderRepository.java

here, MyApplication.java is the main file, while customer and order are other packages, contains their classes.

Data Base -> Entity -> Repository -> Service -> Rest -> Browser

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::: Spring Boot ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


To download Spirng boot template, search spring boot initializr.


Annotations :-


@SpringBootApplication 
______________________

- It is the combination of @EnableAutoConfiguration, @ComponentScan, and @Configuration.

- @EnableAutoConfiguration 	: automatically configures the application based on dependencies that you have added.

- @Configuration			: enables Java based configurations for Spring boot application.

- @ComponentScan			: scans all the beans annoted with @Component, @Service, @Repository, @Controller.	





This is how the main class looks like :
________________________________________


@SpringBootApplication
public class MyClass implements CommandLineRunner{
	
	
	public static void main(String[] args) {
		SpringApplication.run(MyClass.class, args) ;
	}

	@Override
	public void run(String... args) throws Exception {
		//	all those code we want to implement.
	}
}


- Spring Boot provides 2 interfaces, CommandLineRunner and ApplicationRunner, where, CommandLineRunner provides the feature of Overriding run() method.
- The main class which implements the CommandLineRunner calls its run method automatically.

- This Annotation perform the Equivalent work of @Configuration, @EnableAutoConfiguration, and @ComponentScan.
- This annotation should be used in main file which is defined at Root level.




::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:::::::::::::::::::: Aspect Oriented Programming :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Dependency for pom.xml file:-
_____________________________

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-aop</artifactId>
</dependency>


----------------------
!!! NOTE !!!
----------------------
don't forget to execlude the logging of spring boot starter by adding the exclusions in dependency of springframework.boot.


<dependency>
	<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter</artifactId>


			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-logging</artifactId>
				</exclusion>
			</exclusions>


</dependency>



and in parent tag of pom, change version to 2.6.6

---------------------------------------------------------------------------------------



Annotations :
______________

@Component 
@Aspect 
_________

- These are class level annotations which are required to make a class act as Aspect.



Join Point 	: A point (or can say a method) before or after which any required method gets executed.
Pointcut 	: It is just a expression used to represent join point.
Advice	: It is the method which is going to be get executed after or before that method you want to execute.

How to execute it .....??
_________________________

execution(<modifiers> <return-type> <fully qualified class name>.<method-name>(parameters))

Like : 
______

@Before("execution(public com.myPackage.myClass.methodName(..))")
public void before() {
	System.out.println("Before advice called.");
}

Note :- We can use * if we want to execute the above method at all the method.
______

@Before("execution(* com.myPackage.myClass.*(..))")
public void before() {
	System.out.println("Before advice called.");
}

Different Method level annotations used to execute the method at different situations are :

@Before
@After
@AfterReturning
@AfterThrowing(pointcut = "" , throwing = "exceptionName" )
@Around





::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:::::::::::::::::::: Log4j2 ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Dependency for pom.xml file:-
_____________________________

<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-log4j2</artifactId>
</dependency>


In Application.properties file : 
___________________________________

logging.level.com.project = INFO
logging.pattern.console = %d{yyyy-MMM-dd HH:mm:ss a} [%t] %-5level %logger - %msg%n

logging.file.path=logs/

logging.file.name=logs/MyLogging.log

----------------------------------------------------

- LogFactory.getLog( class_Name ) method of Log of apache logging is used to create its object and use it for logging.

- Various loggings are warn, info, error, debug, trace.