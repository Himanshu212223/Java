
/*
 	Generics :-
 	_________________
 	
 	- It provides Compile Time Data type to the data structures.
 */

package PracticeFiles;

import java.util.ArrayList;
import java.util.List;


// ------------------ Normal Class --------------------------------------
class Product1{
	public int productDetail1 ;
	public int productDetail2 ;
	
	public void setData(int productDetail1, int productDetail2) {
		this.productDetail1 = productDetail1 ;
		this.productDetail2 = productDetail2 ;
	}
	
	public void getData() {
		System.out.println("Data1 = " + this.productDetail1 ) ;
		System.out.println("Data1 = " + this.productDetail1 ) ;
	}
};


//	---------------- Class using Generic -----------------------------
class Product2 <DataType> {
	public DataType productDetail1 ;
	public DataType productDetail2 ;
	
	public void setData(DataType productDetail1, DataType productDetail2) {
		this.productDetail1 = productDetail1 ;
		this.productDetail2 = productDetail2 ;
	}
	
	public void getData() {
		System.out.println("Data1 = " + this.productDetail1 ) ;
		System.out.println("Data1 = " + this.productDetail1 ) ;
	}
};



public class GenericsExample {
	public static void main(String [] args) {
		
		//	List without Generics .
		
		List list1 = new ArrayList() ;
		// since, it is not generic, hence, any type of value can be inserted in list.
		//	It is also called as Raw type list, and the elements are of object types.
		
		list1.add(1) ;
		list1.add("a") ;
		list1.add(false) ;
		
		System.out.println(list1) ;
		
		//	List with Generics .
		
		List <Integer> list2 = new ArrayList<>() ;
		
		list2.add(1) ;
		list2.add(2) ;
		list2.add(3) ;
		
		System.out.println(list2) ;
	}
}
