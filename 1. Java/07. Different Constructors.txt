
/*	
 	CONSTRUCTORS 
 	________________________
 	
 	- Different types of constructors are :
 			1. Default or non-parameterized constructor 
 			2. Copy Constructor
 			3. Parameterized Constructor
 			
 	- Default constructor is by default provided by the compiler that's why we are able to 
 		create the object of class as ClassName object = new ClassName() ;
 		
 	- If we make a parameterized constructor, then, compiler wouldn't provide default constructor
 		and we have to make a default constructor by ourself.
 		
 	- Copy constructor just creates copies the attribute value of one object to another.
 		but, if object1 = object2 is done, then, object1 will be referencing to object2.
 		This is kind of Aliasing (i.e., giving another name to a particular variable).
 		Any changes in object2 will get reflected to object1 too.
 			
 	- We use new keyword to create object and = sign is used to create reference.
*/


package PracticeFiles;

class Student{
	public int rollNo ;
	public String name ;
	
	//	Default Constructor
	
	Student(){
		
	}
	
	//	Parameterized Constructor	: used to initialize the values while object creation.
	
	Student(int rollNo, String name){
		this.rollNo = rollNo ;
		this.name = name ;
	}
	
	//	Copy Constructor	: used to copy details of one object into another.
	
	Student(Student obj){
		this.rollNo = obj.rollNo ;
		this.name = obj.name ;
	}
	
	public String getDetailsOfStudent() {
		return " Roll No : " + this.rollNo + " Name    : " + this.name ;
	}
	
	
	//	to get the object of class Student
	
	public Student getObjectOfStudent() {
		return this ;
	}
}



public class Constructors {
	public static void main(String [] args) {
		
		Student s1 = new Student();			//	Object Creation and referencing
		Student s2 = new Student();			//	Object Creation and referencing
		
		s1 = new Student(12, "Naman") ;
		s2 = new Student(s1) ;				//	Object referencing
		
		Student s3 = s2 ;		//	Aliasing or referencing, 	Object referencing
		
		//	lets change the attribute values of s2 after aliasing to s3.
		s2.rollNo = 90 ;
		s2.name = "Aman" ;
		
		System.out.println(s1.getDetailsOfStudent()) ;
		System.out.println(s2.getDetailsOfStudent()) ;
		System.out.println(s3.getDetailsOfStudent()) ;
		
		System.out.println(s2.getObjectOfStudent()) ;
		System.out.println(s3.getObjectOfStudent()) ;
	}
}
